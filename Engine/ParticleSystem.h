#pragma once
#include "Component.h"

class Material;
class Mesh;
class StructuredBuffer;
class Texture;

struct ParticleInfo
{
	// 월드 좌표
	Vec3	worldPos;
	// 현재 경과 시간
	float	curTime;
	// 이동 방향
	Vec3	worldDir;
	// 수명
	float	lifeTime;
	// 활성 상태
	int32	alive;
	// 패딩(12 + 4 + 12 + 4 + 4 + 12(패딩))
	int32	padding[3];
};

// 컴퓨트 셰이더에서 공유 데이터를 저장하는 버퍼
struct ComputeSharedInfo
{
	int32 addCount;
	int32 padding[3];
};

class ParticleSystem : public Component
{
public:
	ParticleSystem(bool refraction);
	virtual ~ParticleSystem();

public:
	virtual void FinalUpdate();
	void Render();
	// 파티클 생성 간격, 누적 시간, 최소 수명, 최대 수명, 최소 속도, 최대 속도, 시작 크기, 종료 크기
	void SetParticleInfo(float createInterval, float accTime, float minLifeTime, float maxLifeTime,
		float minSpeed, float maxSpeed, float startScale, float endScale);

	void SetParticleInterval(float createInterval, float accTime);
	void SetParticleLiftTime(float minLifeTime, float maxLifeTime);
	void SetParticleSpeed(float minSpeed, float maxSpeed);
	void SetParticleScale(float startScale, float endScale);

	void SetParticleTexture(shared_ptr<Texture> texture);

public:
	virtual void Load(const wstring& path) override { }
	virtual void Save(const wstring& path) override { }

private:
	shared_ptr<StructuredBuffer>	_particleBuffer;
	shared_ptr<StructuredBuffer>	_computeSharedBuffer;
	uint32							_maxParticle = 1000;

	shared_ptr<Material>		_computeMaterial;
	shared_ptr<Material>		_material;
	shared_ptr<Mesh>			_mesh;

	// 파티클 생성 간격
	float				_createInterval = 0.005f;
	// 누적 시간
	float				_accTime = 0.f;

	// 최소 수명
	float				_minLifeTime = 0.5f;
	// 최대 수명
	float				_maxLifeTime = 1.f;

	// 최소 속도
	float				_minSpeed = 100;
	// 최대 속도
	float				_maxSpeed = 50;

	// 시작 크기
	float				_startScale = 10.f;
	// 종료 크기
	float				_endScale = 5.f;
};
